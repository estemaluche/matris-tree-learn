Superpermutation solution for Machine Learning =

given value A
basic algorithm AX+B
for A : RMatris1<Vec[x]>
for X : probability
for B : RMatris2<Vec[x]

//The given values calculating and results insert the RMatris2 , 
calculating probability and returning minus point to AI.

for matris calculating given value Vec<X>.len calculating : 
example : 
     row count : if X % 3 == 0 ;
     X/3
     else 
     X/2 - 1  
     ------------- 
     X : 15
    X1 , X2 , X3 , X4, X5
    X6 , X7 , X8 , X9 ,X10
    X11, X12, X13, X14, X15

    for x in Matris 
    perc_h = 10
    perc_h = (perc_h*(perc_h*x))

    formule for X(n+1) =X+ X/perc_h
    X1 = 5,102 X2 : 5.107102 X3: 5.2071


usage of Superpermutation :
A[n]*X[n] == RMatris2[n,n]
for x,y in RMatris1{
    RMatris2[x] == function_x(RMatris1)
}

Pyhsical Example:
from a car to b car in traffic:
speed / 2 = break distance
symbols : A : Distance // B: Break Distance // X : probability (ex break dont work for 3 secs) 
A : 55.71meters
X : 4.71
B : 51.00 / 2 = 25.5 meters need to stop before crash
